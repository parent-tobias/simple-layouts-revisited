{"ts":1363022922109,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Nested Views with Backbone and Marionette\n===============================================\n\nThis is the codebase for the second in a series of Backbone/Marionette tutorials. The first, [http://snowmonkey.parentleafarm.com/blog/2013/02/creating-a-deeply-nested-model-with-backbone-js/] (http://snowmonkey.parentleafarm.com/blog/2013/02/creating-a-deeply-nested-model-with-backbone-js/), dealt with deeply nested models in Backbone. This one, [http://snowmonkey.parentleafarm.com/blog/2013/02/views-with-deeply-nested-models/] (http://snowmonkey.parentleafarm.com/blog/2013/02/views-with-deeply-nested-models/), deals with the views that will be rendered, in keeping with said nested model.\n\nThe live result can be found here: [http://snowmonkey.parentleafarm.com/nested-layout/] (http://snowmonkey.parentleafarm.com/nested-layout/)\n\nThis tutorial will be part of a larger work, taking the process of building a complex, nested, single-page app with Backbone and Marionette. The purposes of this particular step are:\n\n* To introduce some of the visual components of the target\n* Examine the different view classes Marionette provides, and how they differ\n* Look at a simple example of using Marionette's event aggregator, and why it matters"]],"start1":0,"start2":0,"length1":0,"length2":1237}]],"length":1237}
{"contributors":[],"silentsave":false,"ts":1363023250434,"patch":[[{"diffs":[[0,"ase for "],[1,"a revisit of "],[0,"the seco"]],"start1":108,"start2":108,"length1":16,"length2":29},{"diffs":[[0," second "],[1,"post "],[0,"in a ser"]],"start1":132,"start2":132,"length1":16,"length2":21},{"diffs":[[0,"bone"],[-1,"/Marionette"],[0," tut"]],"start1":164,"start2":164,"length1":19,"length2":8},{"diffs":[[0,". Th"],[-1,"is one"],[1,"e second"],[0,", [h"]],"start1":435,"start2":435,"length1":14,"length2":16},{"diffs":[[0,"d model."],[1," This one fixes some problems with the last post, by creating a controller and using Marionette's AppRouter object. By doing this, the fragility that was introduced into the Views is remedied."],[0,"\n\nThe li"]],"start1":688,"start2":688,"length1":16,"length2":208},{"diffs":[[0," To "],[-1,"introduce some of the visual components of the target\n* Examine the different view classes Marionette provides, and how they differ\n* Look at a simple example of"],[1,"examine the roles of Model/View/Controller, and how to avoid crossing them.\n* Routing events"],[0," usi"]],"start1":1217,"start2":1217,"length1":169,"length2":100},{"diffs":[[0,"e's "],[-1,"event agg"],[1,"AppRouter.\n* C"],[0,"re"],[-1,"g"],[0,"at"],[-1,"or,"],[1,"ing"],[0," and "],[-1,"why it matters"],[1,"using a controller."]],"start1":1329,"start2":1329,"length1":40,"length2":49}]],"length":1378,"saved":false}
